---

#- name: configure | Set vm.overcommit_memory to 1 in /etc/sysctl.conf
#  sysctl:
#   name: vm.overcommit_memory
#   value: 1
#   state: present

#- name: configure | TCP backlog setting of 512
#  shell: echo 512 > /proc/sys/net/core/somaxconn

#- name: configure | Shutdown transparent_hugepage.
#  shell: 'echo never > {{ item }}'
#  with_items:
#    - '/sys/kernel/mm/transparent_hugepage/enabled'
#    - '/sys/kernel/mm/transparent_hugepage/defrag'

#- name: configure | Set transparent_hugepage is never to /etc/rc.local
#  lineinfile: dest=/etc/rc.local line='echo never > {{ item }}'
#  with_items:
#    - '/sys/kernel/mm/transparent_hugepage/enabled'
#    - '/sys/kernel/mm/transparent_hugepage/defrag'


- name: Enuser redis group
  group:
    name: '{{ redis_group }}'
    gid: '{{ redis_gid }}'
    state: present

- name: Enuser redis user
  user:
    name: '{{ redis_user }}'
    group: '{{ redis_group}}'
    home: '{{ redis_dbdir }}'
    uid: '{{ redis_uid }}'
    comment: 'Redis Database Server'
    shell: '/sbin/nologin'
    state: present

- name: Ensure redis directory is exist
  file:
    path: '{{ item }}'
    state: directory
    owner: '{{ redis_user }}'
    group: '{{ redis_group }}'
  with_items:
    - '{{ redis_dbdir }}'
    - '{{ redis_logdir }}'

- name: Set redis role fact
  set_fact:
    redis_replication_role: >-
      {%- for host in play_hosts -%}
        {%- if host == inventory_hostname -%}
          {%- if loop.index0 == 0 -%}
            master
          {%- else -%}
            slave
          {%- endif -%}
        {%- endif -%}
      {%- endfor -%}
  when: redis_slave_enabled

- name: Copy redis configuration
  template:
    src: redis.conf.j2
    dest: '{{ redis_config_file }}'
    owner: '{{ redis_user }}'
    group: root
    mode: 0640
    force: '{{ overwrite_redis_configuration }}'
  notify: restart redis

- meta: flush_handlers

- name: Gather redis replication info
  shell: >
    redis-cli -h {{ redis_master_host }} -p {{ redis_port }} -a {{ redis_masterauth }}
    info replication | grep connected_slaves | awk -F":" '{print $2}'
  register: redis_replication_info
  when: redis_slave_enabled

- name: restart redis service
  service: name=redis state=restarted
  when: redis_slave_enabled and (redis_replication_info.stdout != '2')

- name: Ensure redis service is running and enabled on boot
  service: name=redis state=started enabled=yes

- name: Wait when redis is started
  wait_for:
    host: "{{ item }}"
    port: "{{ redis_port }}"
    timeout: 120
  with_items: "{{ redis_bind_interface.split(' ') | map('replace', '0.0.0.0', '127.0.0.1') | list }}"